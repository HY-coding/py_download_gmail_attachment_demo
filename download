import base64
from typing import List
from urllib import response
import os
import time
from datetime import date
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

def search_emails(query: str, label_ids: List=None):
    try:
        message_list = service.users().messages().list(
            userId = 'me',
            labelIds = label_ids,
            q = query
        ).execute()

        emails = message_list.get('messages')
        next_page_token = message_list.get('nextPageToken')

        while next_page_token:
            message_list = service.users().messages().list(
                userId = 'me',
                labelIds = label_ids,
                q = query,
                pageToken= next_page_token

            ).execute()
            emails.extend(message_list.get('messages'))
            next_page_token = message_list.get('nextPageToken')

        return emails


    except Exception as e:
        raise print('No emails returned')

def get_file_data(message_id, attachment_id):
    response = service.users().messages().attachments().get(
        userId = 'me',
        messageId = message_id,
        id = attachment_id
    ).execute()

    file_data = base64.urlsafe_b64decode(response.get('data').encode('UTF-8'))
    return file_data

def get_message(message_id, msg_format='metadata', metadata_headers: List=None):
    message = service.users().messages().get(
        userId='me',
        id=message_id,
        format=msg_format,
        metadataHeaders=metadata_headers
    ).execute()

    return message

def get_header_subject(headers):
    for h in headers:
        if h["name"] == "Subject":
            return h["value"]
    return ""

def get_info(headers):
    msg_from = ""
    subject = ""
    date = ""
    for h in headers:
        if h["name"] == "From":
            msg_from = h["value"]

        if h["name"] == "Date":
            date = h["value"]

        if h["name"] == "Subject":
            subject = h["value"].replace(" ", "")

    print("From : " + msg_from)
    print("Date : " + date)
    print("Subject : " + subject)

    return [msg_from, date, subject]

if __name__ == '__main__':
    
    SCOPES = ['https://mail.google.com/']

    today = date.today()
    
    print("Today's date:", today)
    
    creds = Credentials.from_authorized_user_file('token.json', SCOPES)
    service = build('gmail', 'v1', credentials=creds)

    # after:2022/5/12 before:2022/7/13

    #query_date = "before: {0} after: {1}".format(today.strftime('%Y/%m/%d'), date.today().replace(day=1).strftime('%Y/%m/%d'))
    query_date = "after: {0}".format(date.today().replace(day=1).strftime('%Y/%m/%d'))
    #print(query_date)

    query_string = 'has:attachment & 信用卡 & 帳單' + " & " + query_date
    

    emails = search_emails(query_string)

    print("found ", len(emails), " messages.")

    save_location = os.getcwd()

    #print(email_messages)



    for email in emails:
        message = get_message(email['id'], msg_format='full', metadata_headers=['parts'])
        payload = message.get('payload')
        headers = message['payload']['headers']
        
        #for header in headers:
        #    print(header)

        info = get_info(headers)
        
        print("attachments: ")
        if 'parts' in payload:
            for parts in payload['parts']:
                file_name = parts['filename']
                
                if os.path.exists(file_name):
                    print(file_name + " exists")
                    continue

                body = parts['body']
                if 'attachmentId' in body:
                    attachment_id = body['attachmentId']
                    attachment_content = get_file_data(email['id'], attachment_id)
                    
                    print("download " + file_name)

                    with open(os.path.join(save_location, file_name),'wb') as _f:
                        _f.write(attachment_content)
                        print(f'File {file_name} is saved at {save_location}')

        print(" ")
        time.sleep(0.5)


